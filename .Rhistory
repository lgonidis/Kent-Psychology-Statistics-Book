install.packages("tinytex")
2+3
p<-3+5
p
3+2
p <- 3+2
surface <- p*p
surface
day
day
Age <- c(18, 18, 20, 32, 45, 33, 19, 19, 20, 58, 63, 21, 19, 19, 18)
# If we call the variable Age we will get all 15 values
Age
Age[7]
Prices <- c(115, 120, 200, 300, 500)
Prices
Newprices <- 2*Price
Newprices <- 2*Prices
# call Price to see the values in the console
Newprices
numbers <- sample.int(30, 200, replace = TRUE)
numbers
# I am using a R function called sample.int()
# This function creates random integer numbers
numbers <- sample.int(10, 5, replace = TRUE)
numbers
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
groups <- cut(numbers, breaks = c(1,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(groups)
hist(numbers, breaks = 5)
hist(numbers, breaks = 5, labels = TRUE)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
# Now we will call a new function to help us group our data
# First put them in 5 groups
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(numbers, breaks = 5, labels = TRUE)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(numbers, breaks = 5, labels = TRUE)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
# Now we will call a new function to help us group our data
# First put them in 5 groups
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(numbers, breaks = 5, labels = TRUE)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
# Now we will call a new function to help us group our data
# First put them in 5 groups
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(numbers, breaks = 5, labels = TRUE)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
# Now we will call a new function to help us group our data
# First put them in 5 groups
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(numbers, breaks = 5, labels = TRUE)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
# Now we will call a new function to help us group our data
# First put them in 5 groups
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(numbers, breaks = 5, labels = TRUE)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
# Now we will call a new function to help us group our data
# First put them in 5 groups
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(numbers, breaks = 5, labels = TRUE)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
# Now we will call a new function to help us group our data
# First put them in 5 groups
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(numbers, breaks = 5, labels = TRUE)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
# Now we will call a new function to help us group our data
# First put them in 5 groups
groups <- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
hist(numbers, breaks = 5, labels = TRUE)
numbers
groups <- cut(numbers, breaks = 5, right = TRUE)
# Now I can produce my frequency table using another function
summary(groups)
groups <- cut(numbers, breaks = 5, right = FALSE)
# Now I can produce my frequency table using another function
summary(groups)
groups <- cut(numbers, breaks = 5, include.lowest = TRUE, right = FALSE)
# Now I can produce my frequency table using another function
summary(groups)
groups <- cut(numbers, b = 5, include.lowest = TRUE, right = FALSE)
# Now I can produce my frequency table using another function
summary(groups)
# Similarly as above, I will call sample.int()
# But this time I need 200 numbers between 1 and 50
# See how my arguments have now changed
numbers <- sample.int(50, 200, replace = TRUE)
numbers
groups <- cut(numbers, b = 5, include.lowest = TRUE, right = FALSE)
# Now I can produce my frequency table using another function
summary(groups)
data()
data("swiss")
force(swiss)
data("ToothGrowth")
force(ToothGrowth)
View(ToothGrowth)
data("ToothGrowth")
data("ToothGrowth")
data("ToothGrowth")
data("ToothGrowth")
data("ToothGrowth")
force(ToothGrowth)
View(ToothGrowth)
View(ToothGrowth)
View(ToothGrowth)
View(ToothGrowth)
ToothGrowth$len
ToothGrowth$supp
ToothGrowth$dose
ToothGrowth$len
ToothGrowth$supp
ToothGrowth$dose
hist(ToothGrowth$len)
hist(ToothGrowth$len)
# the following command will calculate the mean of len
mean(ToothGrowth$len)
# the following command will find the median value of len
median(ToothGrowth$len)
mode(ToothGrowth$len)
install.packages("DescTools")
Mode(ToothGrowth$len)
library(DescTools)
Mode(ToothGrowth$len)
data(iris)
force(iris)
View(ToothGrowth)
View(iris)
library(bookdown)
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("ggpubr")
mean(ToothGrowth$len)
median(ToothGrowth$len)
range(ToothGrowth$len)
IQR(ToothGrowth$len)
variance(ToothGrowth$len)
mean(ToothGrowth$len)
median(ToothGrowth$len)
range(ToothGrowth$len)
IQR(ToothGrowth$len)
var(ToothGrowth$len)
sd(ToothGrowth$len)
ggboxplot(ToothGrowth$len)
library(tidyverse)
library(ggpubr)
data("ToothGrowth")
ggboxplot(ToothGrowth$len)
ggboxplot(ToothGrowth$len, color = ToothGrowth$supp)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
ggboxplot(ToothGrowth$len, color = ToothGrowth$supp)
library(ggpubr) ### do not type this line if you already included at the top of your script
ggboxplot(ToothGrowth, x = len)
library(ggpubr) ### do not type this line if you already included at the top of your script
ggboxplot(ToothGrowth, x = len)
library(ggpubr) ### do not type this line if you already included at the top of your script
ggboxplot(ToothGrowth, x = "len")
library(ggpubr) ### do not type this line if you already included at the top of your script
ggboxplot(ToothGrowth$len)
ggboxplot(ToothGrowth, x="dose", y = "len")
ggboxplot(ToothGrowth, x="dose", y = "len", color = "supp")
ggboxplot(ToothGrowth, x="supp", y = "len", color = "dose")
ggboxplot(ToothGrowth, x="supp", y = "len", fill = "dose")
ggboxplot(ToothGrowth, x="supp", y = "len", fill = "dose", add = "mean_sd")
ggbarplot(ToothGrowth$len)
ggboxplot(ToothGrowth, x="dose", y = "len")
ggbarplot(ToothGrowth, x="dose", y = "len")
ggbarplot(ToothGrowth, x="dose", y = "len", add = "mean")
ggbarplot(ToothGrowth, x="dose", y = "len", add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", position_dodge = 0.5 , add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", position_dodge = 0.5 , add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", position_dodge = 1 , add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", position = position_dodge(0.5) , add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", position = position_dodge(1) , add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", position = position_dodge(0.8) , add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", position = position_dodge(0.6) , add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", position = position_dodge(0.67) , add = "mean_sd")
ggbarplot(ToothGrowth, x="dose", y = "len", fill = "supp", position = position_dodge(0.7) , add = "mean_sd")
library(ggpubr)
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
ggboxplot(mtcars, x = "cyl", y = "disp")
ggboxplot(mtcars, x = "cyl", y = "mpg", fill = "am")
ggbarplot(mtcars, x = "cyl", y = "mpg", fill = "am", position = position_dodge(1), add = "mean_sd")
ggbarplot(mtcars, x = "am", y = "mpg", fill = "cyl", position = position_dodge(1), add = "mean_sd")
ggbarplot(mtcars, y = "mpg", fill = "cyl", position = position_dodge(1))
ggbarplot(mtcars, x = "cyl = "mpg", fill = "cyl", position = position_dodge(1))
ggbarplot(mtcars, x = "cyl" y = "mpg", fill = "cyl", position = position_dodge(1))
ggbarplot(mtcars, x = "cyl", y = "mpg", fill = "cyl", position = position_dodge(1))
ggbarplot(mtcars, x = "cyl", y = "mpg", position = position_dodge(1))
ggbarplot(mtcars, x = "cyl", y = "mpg", position = position_dodge(1), add = "mean")
ggbarplot(mtcars, x = "cyl", y = "mpg", color = "cyl", position = position_dodge(1), add = "mean")
ggbarplot(mtcars, x = "cyl", y = "wt", fill = "am", position = position_dodge(0.5), add = "mean_sd"
ggbarplot(mtcars, x = "cyl", y = "wt", fill = "am", position = position_dodge(0.5), add = "mean_sd")
mean(ToothGrowth$len)
median(ToothGrowth$len)
range(ToothGrowth$len)
IQR(ToothGrowth$len)
var(ToothGrowth$len)
sd(ToothGrowth$len)
# Set so that long lines in R will be wrapped:
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
