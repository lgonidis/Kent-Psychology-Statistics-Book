<<<<<<< HEAD
[["lab-session-3-week-11.html", "Lab Session 3 (Week 11) 2.26 What we have learnt so far 2.27 Learning objectives 2.28 Lets get started 2.29 Measures of Central Tendency 2.30 Adding a new package 2.31 To sum up 2.32 Additional Exercises (spoiler alert: if you get stuck the answers are at the end of the pdf) 2.33 Solutions: SPOILER ALERT", " Lab Session 3 (Week 11) 2.26 What we have learnt so far In the previous two labs (Week 10 and Week 11) we learnt about variables, vectors, and operators. Furthermore, we were introduced to the uses of functions and their arguments. These were the fundamental steps that we had to take before we can start carrying out statistical tasks. In the last lab session, we began exploring some basic statistical tasks such as creating grouped frequency tables and histograms. These steps, even though simple, allowed us to develop a sense of our data. Creating visual representations of our data is one of Rs strongest aspects. For the time being we only practiced with hist() and pie(), however as we become more confident with R we will also explore some additional features that R packages can give us. R in its core installation has a number of useful functions. However, these functions do not cover all the possible tasks we would wish to perform. In order to overcome this weakness, R allows us to install and use additional packages. These packages are more specialised than the core R and can provide us with numerous new statistical tools. Today, we will learn how to install and use such packages and see how they can provide us with useful new features. We will also see a number of examples of how to use R to acquire the mean, median, and mode of a sample. Finally, in order to make things more interesting we will use some experimental data that R offers by default. So today, we will not be generating datasets comprised of random data. Instead we will be using some of the built-in datasets. Finally, please be aware that code we want you to type, will appear within a grey box in our instructions. However, any lines that begin with ## [1] are output, this means that you do not need to type these lines of text in your script. 2.27 Learning objectives Installing R packages Calling R packages Use core R and packages to find measures of central tendency 2.28 Lets get started If you are working on RStudio Cloud skip to step 2 below For this lab session you will need to create a new project in RStudio. Run RStudio and create a new project by clicking on File &gt;&gt; New Project  .Then select New Directory and then New Project. Enter a Directory name. As mentioned in Week 9, we recommend naming the folder by week, so Week 11 would be ideal. Click Browse and make sure you place that folder in your PSYC3000 folder that you created on your Desktop. Click Create Project to finalise creating your new project. Now create a new script from File &gt;&gt; New File &gt;&gt; R Script. Save your new script under the name Week 11. One of the built-in datasets that R offers for free is called ToothGrowth. The ToothGrowth data set contains the result from an experiment studying the effect of vitamin C on tooth growth in 60 Guinea pigs. Each animal received one of three dose levels of vitamin C (0.5, 1, and 2 mg/day) by one of two delivery methods, (orange juice (OJ) or ascorbic acid (a form of vitamin C and coded as VC). Even though this dataset is not the result of Psychological research it does have the structure of a data file from Psychological research where we administer an intervention in three different dosages and two different methods. Lets see how we can explore this dataset. In your new script type and run the following: data(&quot;ToothGrowth&quot;) This informs R that we want to work with the build-in dataset called ToothGrowth. If you have a look at your Environment you will now see under the section called Data an object called ToothGrowth. You will also see some additional information, it has 60 observations and 3 variables. If you also move your mouse pointer on top of ToothGrowth and leave it there you will get a tooltip window informing you that this is a data.frame. For now you can consider a data.frame as a table that contains information for more than one variables. If you click once on ToothGrowth then RStudio will open and display this data.frame for you. You can see it in a new tab that opened next to your script. You can see it has three columns, one per variable. The top row includes the variable names. len is the variable that contains information on the tooth growth, supp is the variable that contains information on the vitamin supplement used, and dose is the variable that describes the dosage that was administered. Now return to your script. If you type and run each the following commands one at a time you will see each variable displayed in your console: ToothGrowth$len ToothGrowth$supp ToothGrowth$dose So if I want to work with one of the variables in a dataset I can call it by typing the name of the dataset, then type the $ symbol, and then type the name of the variable. Exercise 1. Try to create a histogram for the variable len of the dataset ToothGrowth. If you are not certain how to do this you can check the solution at the end of this pdf 2.29 Measures of Central Tendency Let us now see how we can use R functions to calculate the mean, median, and mode for a variable. If we want to find the mean of a variable we can use the function mean(). Similarly, if we want to find the median, we can use the median() function. Lets see them in practice for the variable len of the Toothgrowth dataset. # the following command will calculate the mean of len mean(ToothGrowth$len) # the following command will find the median value of len median(ToothGrowth$len) You can see now how with one line of code we can instantly calculate a figure that would have taken us much more time and energy to calculate by hand. Now lets see if we can also find the mode in a similar way. Try the following command and see what happens. mode(ToothGrowth$len) You probably got the answer numeric. This is because the function mode() corresponds to a different task then what we hoped it would perform. Actually, the core installation of R does not have a function that can find the mode value of a variable. However, as we said earlier this is not a problem as we can install and run external packages that can add additional functionalities. 2.30 Adding a new package In order to have a function that can find the mode of our sample we need to install a new package called DescTools. We do that by clicking Tools in the menu and then Install Packages. Then where it says packages, type in DescTools and click Install. If you are promtped with any questions then click on Yes. RStudio will download and install everything automatically and you should be ready to go once you can see the &gt; symbol in the console. Once you install a package you can use it in all future projects and scripts without the need to re-install it. Now we can tell R that we want to use this package in our script by adding and running the following command: library(DescTools) As a good practice we tend to declare the packages we want to use at the top of our scripts. We also need to include the command library(DescTools) only once per script, if we need it at all. Now we have the necessary function to find the mode of len by calling the function Mode() that comes with the package DescTools. Add the following command and run it to get the mode. library(DescTools) Mode(ToothGrowth$len) You should get the following output: ## Warning: package &#39;DescTools&#39; was built under R version 4.1.3 ## [1] 26.4 ## attr(,&quot;freq&quot;) ## [1] 4 This means that your mode is 26.4 and it has a frequency of 4. 2.31 To sum up As we progress through our course we will be using specific packages and functions. You do not need to memorise the packages names. We will be providing those for you. You will also not need to memorise the names of the functions for this term. We will be providing those too. 2.32 Additional Exercises (spoiler alert: if you get stuck the answers are at the end of the pdf) Another dataset that comes build-in with R is called iris. The iris dataset gives the measurements in centimeters of the variables sepal length, sepal width, petal length and petal width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica. The following exercises should be completed in one script: they are one exercise but have been broken into small steps to make your work easier, as well as making it easier to refer to the solutions in the end. Exercise 5.1 Create a new script and name it week 11 iris. Then type in and execute the right command in order to load the dataset iris Exercise 5.2 Explore the data.frame called iris (you can find it in your Environment). You should be able to see that some of the included variables are Sepal.Length, Sepal.Width, Petal.Length, and Petal.Width. Write code to create one histogram for each of the above variables. Spend some time to observe each histogram and think about how the scores are distributed and whether we have skewed distributions. (CAUTION: In R, upper case and lower case letter do matter, make sure to type them exactly as you see them) Exercise 5.3 Type the right code in order to get the mean and the median for all the above variables. Exercise 5.4 Type the right code in order to get the mode for all the above variables. (Hint: do not forget the library and remember the importance of upper case letters.) . . . . . . . . . 2.33 Solutions: SPOILER ALERT Exercise 5.1 data(iris) [Exercise 5.2{style=color: rgb(180, 60, 140);} hist(iris$Sepal.Length) hist(iris$Sepal.Width) hist(iris$Petal.Length) hist(iris$Petal.Width) Exercise 5.3 mean(iris$Sepal.Length) ## [1] 5.843333 mean(iris$Sepal.Width) ## [1] 3.057333 mean(iris$Petal.Length) ## [1] 3.758 mean(iris$Petal.Width) ## [1] 1.199333 median(iris$Sepal.Length) ## [1] 5.8 median(iris$Sepal.Width) ## [1] 3 median(iris$Petal.Length) ## [1] 4.35 median(iris$Petal.Width) ## [1] 1.3 Exercise 5.4 library(DescTools) Mode(iris$Sepal.Length) ## [1] 5 ## attr(,&quot;freq&quot;) ## [1] 10 Mode(iris$Sepal.Width) ## [1] 3 ## attr(,&quot;freq&quot;) ## [1] 26 Mode(iris$Petal.Length) ## [1] 1.4 1.5 ## attr(,&quot;freq&quot;) ## [1] 13 Mode(iris$Petal.Width) ## [1] 0.2 ## attr(,&quot;freq&quot;) ## [1] 29 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
=======
[["lab-session-2-week-10-1.html", "Lab Session 2 (Week 10) 2.20 Learning Objectives 2.21 Vectors 2.22 Creating vectors with random numbers 2.23 Frequency tables in R and Histograms 2.24 Exercise 3 2.25 Exercise 4", " Lab Session 2 (Week 10) 2.20 Learning Objectives In this week’s lab session we will start working on some basic concepts of statistical exploration of data. One of the first steps we take as Psychologists when we want to analyse our data, is first to get a “feel”, or gist if you want, of how are data are distributed. Moreover, we will start using functions and not just rely on simple mathematical operations. Functions are useful collections of commands that can carry out specific tasks without us having to worry about manually calculating figures. By the end of this Lab session you should have a clear understanding of the following concepts: Vectors Functions and Arguments Creating Random Data for Practice Purposes Grouping Data using R Creating Frequency Tables using R Creating a basic Histograms using R Before we begin, do make sure you start a new project and name it Week 11. If you are running RStudio Cloud do not start a new project, continue working on the same one from last week. 2.21 Vectors Let us assume that we asked 15 participants to report their age. One way to record this in R would be to use one variable per participant. It would look something like the following (DO NOT TYPE THE FOLLOWING IN RSTUDIO!!) age1 &lt;- 18 age2 &lt;- 20 age3 &lt;- 35 # and so on all the way down until we reach age15 &lt;- 32 As you can see this would take 15 variables. Not only it would look horrible but also it would be a very wasteful way to store our information. For cases where we want to store multiple observations single value variables are not the best way forward. Actually they are the worst way forward. Instead we can use a variable that can store many different values at once, a vector. The following is an example of a vector that stores our participants 15 ages. Please do type following in your R script and do run each line to see the output. You should name your R script “Week 3”. # We are creating a vector c and we are populating it with 15 values # Then we assign it to a variable called Age Age &lt;- c(18, 18, 20, 32, 45, 33, 19, 19, 20, 58, 63, 21, 19, 19, 18) # If we call the variable Age we will get all 15 values Age [1] 18 18 20 32 45 33 19 19 20 58 63 21 19 19 18 # But we can also access any of the 15 entries we want by calling its &quot;location&quot; Age[7] [1] 19 Note we always use c() to define a vector. The same way we did calculations with simple value variables we can also do with vectors. For example, we may have a vector or prices for products and we may want to double the price of all of the products at once: # We are creating a vector c and we are populating it with 5 prices. # The prices could be in £ or any other currency (we only type the value in). # Then we assign our vector to a variable called Prices. Prices &lt;- c(115, 120, 200, 300, 500) # call Price to see the values in the console Prices [1] 115 120 200 300 500 # We now want a new variable that will include the old prices doubled. # We can call the new variable anything we want, let us call it Newprices Newprices &lt;- 2*Prices # call Price to see the values in the console Newprices [1] 230 240 400 600 1000 # But we can also access any of the 15 entries we want by calling its &quot;location&quot; Age[7] [1] 19 You see how powerful and handy vectors can be as they allow us to work with many values as once. We will be using vectors a lot in our work, as well as an extension of vectors called dataframes. (More about dataframes in the future) 2.22 Creating vectors with random numbers As we do not have any real data yet, we might want to practice out learning with some made up data sets. That is absolutely fine but it poses a problem. If we want to create a vector with 200 made up values it will take us quite a while to actually type 200 values. Luckily, there is a solution to that. We can use an R function to create these numbers automatically. Let us see this in practice with a small example. Below we will use a function called sample.int(), that can generate random integers for us. # I am using a R function called sample.int() # This function creates random integer numbers numbers &lt;- sample.int(10, 5, replace = TRUE) numbers [1] 4 8 1 6 1 As mentioned above, I used a function called sample.int(). A function in R, is a mechanism that can perform a task. In this case our function can select an integer number randomly. A function also includes two brackets (). Within these brackets we can specify our own arguments in order to be clear what we want R to do for us when this function is used. Notice the number 10, this argument instructs our function that we want to pick randomly a number between 1 and 10. Notice the second number 5, this argument instructs our function to give 5 such numbers from 1 to 10. Notice the replace = TRUE part, this is another argument instructing R that numbers could be repeated. In other words, we can see the same number appearing more than once. 2.23 Frequency tables in R and Histograms Let us now proceed to a larger data set comprised of 200 random integers between 1 and 50. We will organise that data in 5 groups and produce a grouped frequency table. Then lastly, we will create a histogram with the same 5 groups. # Similarly as above, I will call sample.int() # But this time I need 200 numbers between 1 and 50. # See how my arguments have now changed. numbers &lt;- sample.int(50, 200, replace = TRUE) numbers [1] 46 30 44 46 14 32 6 2 48 19 5 35 38 1 4 41 41 9 20 10 41 4 12 39 35 [26] 6 47 39 46 9 48 22 19 42 29 22 1 7 15 41 18 11 49 31 16 40 21 20 11 5 [51] 44 28 28 19 43 15 18 39 45 7 39 9 18 10 20 5 1 36 14 19 11 32 39 28 9 [76] 19 18 31 21 34 44 38 15 49 30 2 8 20 27 47 39 41 29 29 42 9 35 27 20 14 [101] 25 43 15 46 36 22 44 15 38 28 16 34 22 33 33 6 43 28 6 46 34 31 39 26 44 [126] 33 46 14 5 9 41 27 18 50 32 14 49 34 17 14 32 49 48 27 7 36 17 45 15 45 [151] 44 41 37 41 34 4 43 48 28 18 18 25 47 3 19 16 23 31 38 37 46 17 1 23 19 [176] 19 5 18 2 15 44 26 42 4 11 49 19 34 47 37 50 41 13 50 12 9 29 14 35 29 # Now we will call a new function to help us group our data. # First put them in 5 groups. The numbers in c() declare the numbers # that define each group. Because I generated numbers from 1 to 50 # I chose to split them in groups of 0-10, 10-20, 20-30, 30-40, # # 40-50 groups &lt;- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE) # Now I can produce my frequency table using another function # This function is called summary () and uses an object as argument # we will use the object groups that we created just above. summary(groups) (0,10] (10,20] (20,30] (30,40] (40,50] 34 49 29 39 49 # We will now use a new function called hist that creates # histograms. # Note that this function has to work with the original numbers # and not with the groups. hist(numbers, breaks = 5, labels = TRUE) Let’s discuss the functions we used: sample.init() creates a sample of integer numbers cut() cuts our sample in smaller pieces. For arguments we had to provide our original sample (numbers). We then specified at what numbers we wanted the breaks to be (c(0,10,20,30,40,50)). Finally, we wanted the numbers on the right end of each group to be included in the count. summary() prints out the group frequency table, we only need one argument here, the variable that contains the grouped data (groups). hist() creates a histogram from our original sample (not the grouped one!!!). The arguments here were our sample (numbers), how many breaks we wanted (breaks = 5), and we wanted each bar to have its frequency at the top (labels = TRUE). As you can see we can define how many groups we want when we ask for our histogram. So when all we want is a histogram, then the cut() and summary() steps can be omitted. The histogram will do that behind the scenes and show us the frequencies in the graph. Try it out on your own by changing the number of breaks in the histogram. Notice each time your run your code you will get a different frequency distribution and a different histogram. This is because we create these 200 numbers randomly and each time we are getting a new set. Learning opportunity from using random numbers. Run the above code many times, and each time observe the new histogram. Then discuss its skewness with your group mates. Does it look as positively or negatively skewed? Keep in mind your friends will have different graphs, so it is best to share your screen and show your histogram. 2.24 Exercise 3 Create a random set of 200 integers between 1 and 40. Group that data in 8 groups and produce the grouped frequency table. Then produce a histogram using these 8 groups. Spend some time to experiments with the number of bars in the histogram as well as generating new random numbers. This will allow you to become good at judging the skewness of a frequency distribution. 2.25 Exercise 4 For this exercise you will have to upload your answers on the Moodle Module Participation section.Start a new script and save it as exercise4, in your new script type in the following two lines exactly as you see them, then select both of them with your mouse and run them. Please run them together and not one by one set.seed(1234) observations &lt;- sample.int(100, 500, replace = TRUE) This should now have created a vector called observations that includes 500 integers from 1 to 200. Using set.seed() allowed us to have the exact same numbers for all the students in the class. We will talk more about set.seed() in next week’s drop-in session. Now create a histogram that will include 10 groups. By observing your histogram go to moodle and answer the relevant questions in the Moodle Module Participation section. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
>>>>>>> b4bb99a6324b6d4d923634dc0240cfd0a59de579
